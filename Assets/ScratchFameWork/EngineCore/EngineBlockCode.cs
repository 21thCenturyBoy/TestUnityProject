//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace ScratchFramework
{
	public static class EngineBlockCodeExtension
	{
		/// <summary> BlockData Template Dict </summary>
		public static Dictionary<int, int> TemplateDict = new Dictionary<int, int>()
		{
			{(int)ScratchBlockType.ApplyForce, 0},
			{(int)ScratchBlockType.CompareValues, 1},
			{(int)ScratchBlockType.DestroyObject, 2},
			{(int)ScratchBlockType.EntityValue, 3},
			{(int)ScratchBlockType.GetCharacterSpeed, 4},
			{(int)ScratchBlockType.GetVectorMagnitude, 5},
			{(int)ScratchBlockType.IfElse, 6},
			{(int)ScratchBlockType.IntegerValue, 7},
			{(int)ScratchBlockType.OnCollisionEnter, 8},
			{(int)ScratchBlockType.OnCollisionExit, 9},
			{(int)ScratchBlockType.OnCollisionStay, 10},
			{(int)ScratchBlockType.OnObjectCreated, 11},
			{(int)ScratchBlockType.RepeatAction, 12},
			{(int)ScratchBlockType.StartCountdown, 13},
			{(int)ScratchBlockType.VectorValue, 14},
		};
		/// <summary> BlockData Logic </summary>
		public static IEngineBlockBaseData CreateBlockData(this ScratchBlockType type)
		{
			switch (type)
			{
				case ScratchBlockType.ApplyForce: return new BlockLogic_ApplyForce();
				case ScratchBlockType.CompareValues: return new BlockLogic_CompareValues();
				case ScratchBlockType.DestroyObject: return new BlockLogic_DestroyObject();
				case ScratchBlockType.EntityValue: return new BlockLogic_EntityValue();
				case ScratchBlockType.GetCharacterSpeed: return new BlockLogic_GetCharacterSpeed();
				case ScratchBlockType.GetVectorMagnitude: return new BlockLogic_GetVectorMagnitude();
				case ScratchBlockType.IfElse: return new BlockLogic_IfElse();
				case ScratchBlockType.IntegerValue: return new BlockLogic_IntegerValue();
				case ScratchBlockType.OnCollisionEnter: return new BlockLogic_OnCollisionEnter();
				case ScratchBlockType.OnCollisionExit: return new BlockLogic_OnCollisionExit();
				case ScratchBlockType.OnCollisionStay: return new BlockLogic_OnCollisionStay();
				case ScratchBlockType.OnObjectCreated: return new BlockLogic_OnObjectCreated();
				case ScratchBlockType.RepeatAction: return new BlockLogic_RepeatAction();
				case ScratchBlockType.StartCountdown: return new BlockLogic_StartCountdown();
				case ScratchBlockType.VectorValue: return new BlockLogic_VectorValue();
			}
			 return null;
		}
	}
	public partial class BlockLogic_ApplyForce : IEngineBlockSimpleBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Action;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.ApplyForce;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Simple;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]对象 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 对象 </summary>
		partial void SetVarGuid_0(ref int newData);
		private BGuid m_VarGuid_1 = BGuid.Empty;
		/// <summary> [Editor Data]向量 </summary>
		public int VarGuid_1
		{
			get => m_VarGuid_1.GetGuid();
			set
			{
				SetVarGuid_1(ref value);
				m_VarGuid_1.SetGuid(value,out m_VarGuid_1);
			}
		}
		/// <summary> 向量 </summary>
		partial void SetVarGuid_1(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 2;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
				case 1:
					VarGuid_1 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
				case 1:
					return VarGuid_1;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[2];
			values[0] = VarGuid_0;
			values[1] = VarGuid_1;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[4] 
				{
					m_Guid,
					m_NextGuid,
					m_VarGuid_0,
					m_VarGuid_1,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_VarGuid_0;
				m_Guids[3] = m_VarGuid_1;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_CompareValues : IEngineBlockOperationBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Condition;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.CompareValues;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Operation;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]左积木 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 左积木 </summary>
		partial void SetVarGuid_0(ref int newData);
		private BGuid m_VarGuid_1 = BGuid.Empty;
		/// <summary> [Editor Data]右积木 </summary>
		public int VarGuid_1
		{
			get => m_VarGuid_1.GetGuid();
			set
			{
				SetVarGuid_1(ref value);
				m_VarGuid_1.SetGuid(value,out m_VarGuid_1);
			}
		}
		/// <summary> 右积木 </summary>
		partial void SetVarGuid_1(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 2;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
				case 1:
					VarGuid_1 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
				case 1:
					return VarGuid_1;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[2];
			values[0] = VarGuid_0;
			values[1] = VarGuid_1;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[3] 
				{
					m_Guid,
					m_VarGuid_0,
					m_VarGuid_1,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_VarGuid_0;
				m_Guids[2] = m_VarGuid_1;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_DestroyObject : IEngineBlockSimpleBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Action;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.DestroyObject;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Simple;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]对象 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 对象 </summary>
		partial void SetVarGuid_0(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 1;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[3] 
				{
					m_Guid,
					m_NextGuid,
					m_VarGuid_0,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_VarGuid_0;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_EntityValue : IEngineBlockVariableBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Variable;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.EntityValue;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Operation;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private ScratchFramework.ScratchValueType m_ValueType = ScratchValueType.EntityRef;
		public ScratchFramework.ScratchValueType ValueType
		{
			get => m_ValueType;
		}
		partial void SetValueType(ref ScratchFramework.ScratchValueType newData);
		private System.String m_VariableName = null;
		public System.String VariableName
		{
			get => m_VariableName;
			set
			{
				SetVariableName(ref value);
				m_VariableName = value;
			}
		}
		partial void SetVariableName(ref System.String newData);
		private System.Object m_VariableValue = null;
		public System.Object VariableValue
		{
			get => m_VariableValue;
			set
			{
				SetVariableValue(ref value);
				m_VariableValue = value;
			}
		}
		partial void SetVariableValue(ref System.Object newData);
		private BGuid m_ReturnParentGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int ReturnParentGuid
		{
			get => m_ReturnParentGuid.GetGuid();
			set
			{
				SetReturnParentGuid(ref value);
				m_ReturnParentGuid.SetGuid(value,out m_ReturnParentGuid);
			}
		}
		partial void SetReturnParentGuid(ref System.Int32 newData);
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_ReturnParentGuid,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_ReturnParentGuid;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_GetCharacterSpeed : IEngineBlockOperationBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.GetValue;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.GetCharacterSpeed;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Operation;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]角色 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 角色 </summary>
		partial void SetVarGuid_0(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 1;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_VarGuid_0,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_VarGuid_0;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_GetVectorMagnitude : IEngineBlockOperationBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.GetValue;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.GetVectorMagnitude;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Operation;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]向量 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 向量 </summary>
		partial void SetVarGuid_0(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 1;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_VarGuid_0,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_VarGuid_0;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_IfElse : IEngineBlockConditionBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Control;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.IfElse;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Condition;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		public BGuidList BranchOperationBGuids { get; set; } = BGuidList.CreateEmptyGuidList(1);
		public BGuidList BranchBlockBGuids { get; set; } = BGuidList.CreateEmptyGuidList(2);
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_NextGuid,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_IntegerValue : IEngineBlockVariableBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Variable;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.IntegerValue;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Operation;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private ScratchFramework.ScratchValueType m_ValueType = ScratchValueType.Integer;
		public ScratchFramework.ScratchValueType ValueType
		{
			get => m_ValueType;
		}
		partial void SetValueType(ref ScratchFramework.ScratchValueType newData);
		private System.String m_VariableName = null;
		public System.String VariableName
		{
			get => m_VariableName;
			set
			{
				SetVariableName(ref value);
				m_VariableName = value;
			}
		}
		partial void SetVariableName(ref System.String newData);
		private System.Object m_VariableValue = null;
		public System.Object VariableValue
		{
			get => m_VariableValue;
			set
			{
				SetVariableValue(ref value);
				m_VariableValue = value;
			}
		}
		partial void SetVariableValue(ref System.Object newData);
		private BGuid m_ReturnParentGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int ReturnParentGuid
		{
			get => m_ReturnParentGuid.GetGuid();
			set
			{
				SetReturnParentGuid(ref value);
				m_ReturnParentGuid.SetGuid(value,out m_ReturnParentGuid);
			}
		}
		partial void SetReturnParentGuid(ref System.Int32 newData);
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_ReturnParentGuid,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_ReturnParentGuid;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_OnCollisionEnter : IEngineBlockTriggerBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Event;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.OnCollisionEnter;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Trigger;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_ReturnVarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data][EntityRef, 碰撞目标] </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0.GetGuid();
			set
			{
				SetReturnVarGuid_0(ref value);
				m_ReturnVarGuid_0.SetGuid(value,out m_ReturnVarGuid_0);
			}
		}
		/// <summary> [EntityRef, 碰撞目标] </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private BGuid m_ReturnVarGuid_1 = BGuid.Empty;
		/// <summary> [Editor Data][EntityRef, 碰撞者] </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1.GetGuid();
			set
			{
				SetReturnVarGuid_1(ref value);
				m_ReturnVarGuid_1.SetGuid(value,out m_ReturnVarGuid_1);
			}
		}
		/// <summary> [EntityRef, 碰撞者] </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		/// <summary> 获取返回值变量长度 </summary>
		public int GetReturnValuesLength()=> 2;
		/// <summary> 设置返回值变量Guid </summary>
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return 0;
		}
		/// <summary> 获取返回值变量Guid数组 </summary>
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[4] 
				{
					m_Guid,
					m_NextGuid,
					m_ReturnVarGuid_0,
					m_ReturnVarGuid_1,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_ReturnVarGuid_0;
				m_Guids[3] = m_ReturnVarGuid_1;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_OnCollisionExit : IEngineBlockTriggerBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Event;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.OnCollisionExit;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Trigger;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_ReturnVarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data][EntityRef, 碰撞目标] </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0.GetGuid();
			set
			{
				SetReturnVarGuid_0(ref value);
				m_ReturnVarGuid_0.SetGuid(value,out m_ReturnVarGuid_0);
			}
		}
		/// <summary> [EntityRef, 碰撞目标] </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private BGuid m_ReturnVarGuid_1 = BGuid.Empty;
		/// <summary> [Editor Data][EntityRef, 碰撞者] </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1.GetGuid();
			set
			{
				SetReturnVarGuid_1(ref value);
				m_ReturnVarGuid_1.SetGuid(value,out m_ReturnVarGuid_1);
			}
		}
		/// <summary> [EntityRef, 碰撞者] </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		/// <summary> 获取返回值变量长度 </summary>
		public int GetReturnValuesLength()=> 2;
		/// <summary> 设置返回值变量Guid </summary>
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return 0;
		}
		/// <summary> 获取返回值变量Guid数组 </summary>
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[4] 
				{
					m_Guid,
					m_NextGuid,
					m_ReturnVarGuid_0,
					m_ReturnVarGuid_1,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_ReturnVarGuid_0;
				m_Guids[3] = m_ReturnVarGuid_1;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_OnCollisionStay : IEngineBlockTriggerBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Event;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.OnCollisionStay;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Trigger;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_ReturnVarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data][EntityRef, 碰撞目标] </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0.GetGuid();
			set
			{
				SetReturnVarGuid_0(ref value);
				m_ReturnVarGuid_0.SetGuid(value,out m_ReturnVarGuid_0);
			}
		}
		/// <summary> [EntityRef, 碰撞目标] </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private BGuid m_ReturnVarGuid_1 = BGuid.Empty;
		/// <summary> [Editor Data][EntityRef, 碰撞者] </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1.GetGuid();
			set
			{
				SetReturnVarGuid_1(ref value);
				m_ReturnVarGuid_1.SetGuid(value,out m_ReturnVarGuid_1);
			}
		}
		/// <summary> [EntityRef, 碰撞者] </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		/// <summary> 获取返回值变量长度 </summary>
		public int GetReturnValuesLength()=> 2;
		/// <summary> 设置返回值变量Guid </summary>
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return 0;
		}
		/// <summary> 获取返回值变量Guid数组 </summary>
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[4] 
				{
					m_Guid,
					m_NextGuid,
					m_ReturnVarGuid_0,
					m_ReturnVarGuid_1,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_ReturnVarGuid_0;
				m_Guids[3] = m_ReturnVarGuid_1;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_OnObjectCreated : IEngineBlockTriggerBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Event;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.OnObjectCreated;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Trigger;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		/// <summary> 获取返回值变量长度 </summary>
		public int GetReturnValuesLength()=> 0;
		/// <summary> 设置返回值变量Guid </summary>
		public void SetReturnValueGuid(int index, int value)
		{
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		/// <summary> 获取返回值变量Guid数组 </summary>
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_NextGuid,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_RepeatAction : IEngineBlockLoopBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Control;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.RepeatAction;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Loop;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_ChildRootGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int ChildRootGuid
		{
			get => m_ChildRootGuid.GetGuid();
			set
			{
				SetChildRootGuid(ref value);
				m_ChildRootGuid.SetGuid(value,out m_ChildRootGuid);
			}
		}
		partial void SetChildRootGuid(ref System.Int32 newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]次数 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 次数 </summary>
		partial void SetVarGuid_0(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 1;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[4] 
				{
					m_Guid,
					m_NextGuid,
					m_ChildRootGuid,
					m_VarGuid_0,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_ChildRootGuid;
				m_Guids[3] = m_VarGuid_0;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_StartCountdown : IEngineBlockLoopBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Control;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.StartCountdown;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Loop;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private BGuid m_NextGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int NextGuid
		{
			get => m_NextGuid.GetGuid();
			set
			{
				SetNextGuid(ref value);
				m_NextGuid.SetGuid(value,out m_NextGuid);
			}
		}
		partial void SetNextGuid(ref int newData);
		private BGuid m_ChildRootGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int ChildRootGuid
		{
			get => m_ChildRootGuid.GetGuid();
			set
			{
				SetChildRootGuid(ref value);
				m_ChildRootGuid.SetGuid(value,out m_ChildRootGuid);
			}
		}
		partial void SetChildRootGuid(ref System.Int32 newData);
		private BGuid m_VarGuid_0 = BGuid.Empty;
		/// <summary> [Editor Data]时间 </summary>
		public int VarGuid_0
		{
			get => m_VarGuid_0.GetGuid();
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0.SetGuid(value,out m_VarGuid_0);
			}
		}
		/// <summary> 时间 </summary>
		partial void SetVarGuid_0(ref int newData);
		/// <summary> 获取输入变量长度 </summary>
		public int GetVarGuidsLength()=> 1;
		/// <summary> 设置输入变量Guid </summary>
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		/// <summary> 获取返回值变量Guid </summary>
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		/// <summary> 获取变量Guid数组 </summary>
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[4] 
				{
					m_Guid,
					m_NextGuid,
					m_ChildRootGuid,
					m_VarGuid_0,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_NextGuid;
				m_Guids[2] = m_ChildRootGuid;
				m_Guids[3] = m_VarGuid_0;

			}
			return m_Guids;
		}
	}
	public partial class BlockLogic_VectorValue : IEngineBlockVariableBase
	{
		/// <summary> [Editor Data]功能类型 </summary>
		public FucType FucType => FucType.Variable;
		/// <summary> [Editor Data]逻辑类型 </summary>
		public ScratchBlockType Type => ScratchBlockType.VectorValue;
		/// <summary> [Editor Data]UI类型 </summary>
		public BlockType BlockType => BlockType.Operation;
		/// <summary> [Editor Data]是否为画布根 </summary>
		public bool IsRoot { get; set; } = false;
		/// <summary> [Editor Data]画布位置(需判断画布根时有效) </summary>
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private BGuid m_Guid = BGuid.Empty;
		/// <summary> [Editor Data]Guid </summary>
		public int Guid
		{
			get => m_Guid.GetGuid();
			set
			{
				SetGuid(ref value);
				m_Guid.SetGuid(value,out m_Guid);
			}
		}
		partial void SetGuid(ref int newData);
		private ScratchFramework.ScratchValueType m_ValueType = ScratchValueType.Vector3;
		public ScratchFramework.ScratchValueType ValueType
		{
			get => m_ValueType;
		}
		partial void SetValueType(ref ScratchFramework.ScratchValueType newData);
		private System.String m_VariableName = null;
		public System.String VariableName
		{
			get => m_VariableName;
			set
			{
				SetVariableName(ref value);
				m_VariableName = value;
			}
		}
		partial void SetVariableName(ref System.String newData);
		private System.Object m_VariableValue = null;
		public System.Object VariableValue
		{
			get => m_VariableValue;
			set
			{
				SetVariableValue(ref value);
				m_VariableValue = value;
			}
		}
		partial void SetVariableValue(ref System.Object newData);
		private BGuid m_ReturnParentGuid = BGuid.Empty;
		/// <summary> [Editor Data]NextGuid </summary>
		public int ReturnParentGuid
		{
			get => m_ReturnParentGuid.GetGuid();
			set
			{
				SetReturnParentGuid(ref value);
				m_ReturnParentGuid.SetGuid(value,out m_ReturnParentGuid);
			}
		}
		partial void SetReturnParentGuid(ref System.Int32 newData);
		private BGuid[] m_Guids = null;
		public BGuid[] GetGuids()
		{
			if (m_Guids == null)
			{
				m_Guids = new BGuid[2] 
				{
					m_Guid,
					m_ReturnParentGuid,

				};
			}
			else{
				m_Guids[0] = m_Guid;
				m_Guids[1] = m_ReturnParentGuid;

			}
			return m_Guids;
		}
	}
}
