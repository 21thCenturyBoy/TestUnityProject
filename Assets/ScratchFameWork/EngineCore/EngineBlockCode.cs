//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace ScratchFramework
{
	public static class EngineBlockCodeExtension
	{
		/// <summary> BlockData Template Dict </summary>
		public static Dictionary<int, int> TemplateDict = new Dictionary<int, int>()
		{
			{(int)ScratchBlockType.ApplyForce, 0},
			{(int)ScratchBlockType.CompareValues, 1},
			{(int)ScratchBlockType.DestroyObject, 2},
			{(int)ScratchBlockType.EntityValue, 3},
			{(int)ScratchBlockType.GetCharacterSpeed, 4},
			{(int)ScratchBlockType.GetVectorMagnitude, 5},
			{(int)ScratchBlockType.IfElse, 6},
			{(int)ScratchBlockType.IntegerValue, 7},
			{(int)ScratchBlockType.OnCollisionEnter, 8},
			{(int)ScratchBlockType.OnCollisionExit, 9},
			{(int)ScratchBlockType.OnCollisionStay, 10},
			{(int)ScratchBlockType.OnObjectCreated, 11},
			{(int)ScratchBlockType.RepeatAction, 12},
			{(int)ScratchBlockType.StartCountdown, 13},
			{(int)ScratchBlockType.VectorValue, 14},
		};
		/// <summary> BlockData Logic </summary>
		public static IEngineBlockBaseData CreateBlockData(this ScratchBlockType type)
		{
			switch (type)
			{
				case ScratchBlockType.ApplyForce: return new BlockLogic_ApplyForce();
				case ScratchBlockType.CompareValues: return new BlockLogic_CompareValues();
				case ScratchBlockType.DestroyObject: return new BlockLogic_DestroyObject();
				case ScratchBlockType.EntityValue: return new BlockLogic_EntityValue();
				case ScratchBlockType.GetCharacterSpeed: return new BlockLogic_GetCharacterSpeed();
				case ScratchBlockType.GetVectorMagnitude: return new BlockLogic_GetVectorMagnitude();
				case ScratchBlockType.IfElse: return new BlockLogic_IfElse();
				case ScratchBlockType.IntegerValue: return new BlockLogic_IntegerValue();
				case ScratchBlockType.OnCollisionEnter: return new BlockLogic_OnCollisionEnter();
				case ScratchBlockType.OnCollisionExit: return new BlockLogic_OnCollisionExit();
				case ScratchBlockType.OnCollisionStay: return new BlockLogic_OnCollisionStay();
				case ScratchBlockType.OnObjectCreated: return new BlockLogic_OnObjectCreated();
				case ScratchBlockType.RepeatAction: return new BlockLogic_RepeatAction();
				case ScratchBlockType.StartCountdown: return new BlockLogic_StartCountdown();
				case ScratchBlockType.VectorValue: return new BlockLogic_VectorValue();
			}
			 return null;
		}
	}
	public partial class BlockLogic_ApplyForce : IEngineBlockSimpleBase
	{
		public FucType FucType => FucType.Action;
		public ScratchBlockType Type => ScratchBlockType.ApplyForce;
		public BlockType BlockType => BlockType.Simple;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		private string m_InputValue_1 = string.Empty;
		public string InputValue_1
		{
			get => m_InputValue_1;
			set
			{
				SetInputValue_1(ref value);
				m_InputValue_1 = value;
			}
		}
		partial void SetInputValue_1(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
				case 1:
					InputValue_1 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
				case 1:
					return InputValue_1;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[2];
			values[0] = InputValue_0;
			values[1] = InputValue_1;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		private int m_VarGuid_1 = 0;
		public int VarGuid_1
		{
			get => m_VarGuid_1;
			set
			{
				SetVarGuid_1(ref value);
				m_VarGuid_1 = value;
			}
		}
		partial void SetVarGuid_1(ref int newData);
		public int GetVarGuidsLength()=> 2;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
				case 1:
					VarGuid_1 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
				case 1:
					return VarGuid_1;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[2];
			values[0] = VarGuid_0;
			values[1] = VarGuid_1;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_CompareValues : IEngineBlockOperationBase
	{
		public FucType FucType => FucType.Condition;
		public ScratchBlockType Type => ScratchBlockType.CompareValues;
		public BlockType BlockType => BlockType.Operation;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		private string m_InputValue_1 = string.Empty;
		public string InputValue_1
		{
			get => m_InputValue_1;
			set
			{
				SetInputValue_1(ref value);
				m_InputValue_1 = value;
			}
		}
		partial void SetInputValue_1(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
				case 1:
					InputValue_1 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
				case 1:
					return InputValue_1;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[2];
			values[0] = InputValue_0;
			values[1] = InputValue_1;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		private int m_VarGuid_1 = 0;
		public int VarGuid_1
		{
			get => m_VarGuid_1;
			set
			{
				SetVarGuid_1(ref value);
				m_VarGuid_1 = value;
			}
		}
		partial void SetVarGuid_1(ref int newData);
		public int GetVarGuidsLength()=> 2;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
				case 1:
					VarGuid_1 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
				case 1:
					return VarGuid_1;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[2];
			values[0] = VarGuid_0;
			values[1] = VarGuid_1;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_DestroyObject : IEngineBlockSimpleBase
	{
		public FucType FucType => FucType.Action;
		public ScratchBlockType Type => ScratchBlockType.DestroyObject;
		public BlockType BlockType => BlockType.Simple;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[1];
			values[0] = InputValue_0;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		public int GetVarGuidsLength()=> 1;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_EntityValue : IEngineBlockVariableBase
	{
		public FucType FucType => FucType.Variable;
		public ScratchBlockType Type => ScratchBlockType.EntityValue;
		public BlockType BlockType => BlockType.Operation;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private ScratchFramework.ScratchValueType m_ValueType = ScratchValueType.EntityRef;
		public ScratchFramework.ScratchValueType ValueType
		{
			get => m_ValueType;
		}
		partial void SetValueType(ref ScratchFramework.ScratchValueType newData);
		private System.String m_VariableName = null;
		public System.String VariableName
		{
			get => m_VariableName;
			set
			{
				SetVariableName(ref value);
				m_VariableName = value;
			}
		}
		partial void SetVariableName(ref System.String newData);
		private System.Object m_VariableValue = null;
		public System.Object VariableValue
		{
			get => m_VariableValue;
			set
			{
				SetVariableValue(ref value);
				m_VariableValue = value;
			}
		}
		partial void SetVariableValue(ref System.Object newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_GetCharacterSpeed : IEngineBlockOperationBase
	{
		public FucType FucType => FucType.GetValue;
		public ScratchBlockType Type => ScratchBlockType.GetCharacterSpeed;
		public BlockType BlockType => BlockType.Operation;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[1];
			values[0] = InputValue_0;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		public int GetVarGuidsLength()=> 1;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_GetVectorMagnitude : IEngineBlockOperationBase
	{
		public FucType FucType => FucType.GetValue;
		public ScratchBlockType Type => ScratchBlockType.GetVectorMagnitude;
		public BlockType BlockType => BlockType.Operation;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[1];
			values[0] = InputValue_0;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		public int GetVarGuidsLength()=> 1;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_IfElse : IEngineBlockConditionBase
	{
		public FucType FucType => FucType.Control;
		public ScratchBlockType Type => ScratchBlockType.IfElse;
		public BlockType BlockType => BlockType.Condition;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		public GuidList Branch_OperationGuids { get; set; } = GuidList.CreateEmptyGuidList(1);
		public GuidList Branch_BlockGuids { get; set; } = GuidList.CreateEmptyGuidList(2);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[1];
			values[0] = InputValue_0;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		public int GetVarGuidsLength()=> 1;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_IntegerValue : IEngineBlockVariableBase
	{
		public FucType FucType => FucType.Variable;
		public ScratchBlockType Type => ScratchBlockType.IntegerValue;
		public BlockType BlockType => BlockType.Operation;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private ScratchFramework.ScratchValueType m_ValueType = ScratchValueType.Integer;
		public ScratchFramework.ScratchValueType ValueType
		{
			get => m_ValueType;
		}
		partial void SetValueType(ref ScratchFramework.ScratchValueType newData);
		private System.String m_VariableName = null;
		public System.String VariableName
		{
			get => m_VariableName;
			set
			{
				SetVariableName(ref value);
				m_VariableName = value;
			}
		}
		partial void SetVariableName(ref System.String newData);
		private System.Object m_VariableValue = null;
		public System.Object VariableValue
		{
			get => m_VariableValue;
			set
			{
				SetVariableValue(ref value);
				m_VariableValue = value;
			}
		}
		partial void SetVariableValue(ref System.Object newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_OnCollisionEnter : IEngineBlockTriggerBase
	{
		public FucType FucType => FucType.Event;
		public ScratchBlockType Type => ScratchBlockType.OnCollisionEnter;
		public BlockType BlockType => BlockType.Trigger;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		private int m_ReturnVarGuid_0 = 0;
		/// <summary> EntityRef_0 </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0;
			set
			{
				SetReturnVarGuid_0(ref value);
				m_ReturnVarGuid_0 = value;
			}
		}
		/// <summary> EntityRef_0 </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private int m_ReturnVarGuid_1 = 0;
		/// <summary> EntityRef_1 </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1;
			set
			{
				SetReturnVarGuid_1(ref value);
				m_ReturnVarGuid_1 = value;
			}
		}
		/// <summary> EntityRef_1 </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		public int GetReturnValuesLength()=> 2;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
	}
	public partial class BlockLogic_OnCollisionExit : IEngineBlockTriggerBase
	{
		public FucType FucType => FucType.Event;
		public ScratchBlockType Type => ScratchBlockType.OnCollisionExit;
		public BlockType BlockType => BlockType.Trigger;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		private int m_ReturnVarGuid_0 = 0;
		/// <summary> EntityRef_0 </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0;
			set
			{
				SetReturnVarGuid_0(ref value);
				m_ReturnVarGuid_0 = value;
			}
		}
		/// <summary> EntityRef_0 </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private int m_ReturnVarGuid_1 = 0;
		/// <summary> EntityRef_1 </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1;
			set
			{
				SetReturnVarGuid_1(ref value);
				m_ReturnVarGuid_1 = value;
			}
		}
		/// <summary> EntityRef_1 </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		public int GetReturnValuesLength()=> 2;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
	}
	public partial class BlockLogic_OnCollisionStay : IEngineBlockTriggerBase
	{
		public FucType FucType => FucType.Event;
		public ScratchBlockType Type => ScratchBlockType.OnCollisionStay;
		public BlockType BlockType => BlockType.Trigger;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		private int m_ReturnVarGuid_0 = 0;
		/// <summary> EntityRef_0 </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0;
			set
			{
				SetReturnVarGuid_0(ref value);
				m_ReturnVarGuid_0 = value;
			}
		}
		/// <summary> EntityRef_0 </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private int m_ReturnVarGuid_1 = 0;
		/// <summary> EntityRef_1 </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1;
			set
			{
				SetReturnVarGuid_1(ref value);
				m_ReturnVarGuid_1 = value;
			}
		}
		/// <summary> EntityRef_1 </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		public int GetReturnValuesLength()=> 2;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
	}
	public partial class BlockLogic_OnObjectCreated : IEngineBlockTriggerBase
	{
		public FucType FucType => FucType.Event;
		public ScratchBlockType Type => ScratchBlockType.OnObjectCreated;
		public BlockType BlockType => BlockType.Trigger;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_RepeatAction : IEngineBlockLoopBase
	{
		public FucType FucType => FucType.Control;
		public ScratchBlockType Type => ScratchBlockType.RepeatAction;
		public BlockType BlockType => BlockType.Loop;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private System.Int32 m_ChildRootGuid = 0;
		public System.Int32 ChildRootGuid
		{
			get => m_ChildRootGuid;
			set
			{
				SetChildRootGuid(ref value);
				m_ChildRootGuid = value;
			}
		}
		partial void SetChildRootGuid(ref System.Int32 newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[1];
			values[0] = InputValue_0;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		public int GetVarGuidsLength()=> 1;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_StartCountdown : IEngineBlockLoopBase
	{
		public FucType FucType => FucType.Control;
		public ScratchBlockType Type => ScratchBlockType.StartCountdown;
		public BlockType BlockType => BlockType.Loop;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private System.Int32 m_ChildRootGuid = 0;
		public System.Int32 ChildRootGuid
		{
			get => m_ChildRootGuid;
			set
			{
				SetChildRootGuid(ref value);
				m_ChildRootGuid = value;
			}
		}
		partial void SetChildRootGuid(ref System.Int32 newData);
		private string m_InputValue_0 = string.Empty;
		public string InputValue_0
		{
			get => m_InputValue_0;
			set
			{
				SetInputValue_0(ref value);
				m_InputValue_0 = value;
			}
		}
		partial void SetInputValue_0(ref string newData);
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
				case 0:
					InputValue_0 = value;
					break;
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
				case 0:
					return InputValue_0;
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[1];
			values[0] = InputValue_0;
			return values;
		}
		private int m_VarGuid_0 = 0;
		public int VarGuid_0
		{
			get => m_VarGuid_0;
			set
			{
				SetVarGuid_0(ref value);
				m_VarGuid_0 = value;
			}
		}
		partial void SetVarGuid_0(ref int newData);
		public int GetVarGuidsLength()=> 1;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					VarGuid_0 = value;
					break;
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
				case 0:
					return VarGuid_0;
			}
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[1];
			values[0] = VarGuid_0;
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
	public partial class BlockLogic_VectorValue : IEngineBlockVariableBase
	{
		public FucType FucType => FucType.Variable;
		public ScratchBlockType Type => ScratchBlockType.VectorValue;
		public BlockType BlockType => BlockType.Operation;
		public bool IsRoot { get; set; } = false;
		public BVector2 CanvasPos { get; set; } = BVector2.zero;
		private int m_NextBlockGuid = 0;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
				SetNextBlockGuid(ref value);
				m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private int m_Guid = 0;
		public int Guid
		{
			get => m_Guid;
			set
			{
				SetGuid(ref value);
				m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private ScratchFramework.ScratchValueType m_ValueType = ScratchValueType.Vector3;
		public ScratchFramework.ScratchValueType ValueType
		{
			get => m_ValueType;
		}
		partial void SetValueType(ref ScratchFramework.ScratchValueType newData);
		private System.String m_VariableName = null;
		public System.String VariableName
		{
			get => m_VariableName;
			set
			{
				SetVariableName(ref value);
				m_VariableName = value;
			}
		}
		partial void SetVariableName(ref System.String newData);
		private System.Object m_VariableValue = null;
		public System.Object VariableValue
		{
			get => m_VariableValue;
			set
			{
				SetVariableValue(ref value);
				m_VariableValue = value;
			}
		}
		partial void SetVariableValue(ref System.Object newData);
		public void SetInputValues(int index, string value)
		{
		}
		public string GetInputValue(int index)
		{
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
		}
		public int GetVarGuid(int index)
		{
			return 0;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
		}
		public int GetReturnValueGuid(int index)
		{
			return 0;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
	}
}
