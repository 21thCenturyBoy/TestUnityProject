//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace ScratchFramework
{
	public static class EngineBlockCodeExtension
	{
		/// <summary> BlockData Template Dict </summary>
		public static Dictionary<int, int> TemplateDict = new Dictionary<int, int>()
		{
			{(int)ScratchBlockType.ApplyForce, 0},
			{(int)ScratchBlockType.CompareValues, 1},
			{(int)ScratchBlockType.DestroyObject, 2},
			{(int)ScratchBlockType.EntityValue, 3},
			{(int)ScratchBlockType.GetCharacterSpeed, 4},
			{(int)ScratchBlockType.GetVectorMagnitude, 5},
			{(int)ScratchBlockType.IfElse, 6},
			{(int)ScratchBlockType.IntegerValue, 7},
			{(int)ScratchBlockType.OnCollisionEnter, 8},
			{(int)ScratchBlockType.OnCollisionExit, 9},
			{(int)ScratchBlockType.OnCollisionStay, 10},
			{(int)ScratchBlockType.OnObjectCreated, 11},
			{(int)ScratchBlockType.RepeatAction, 12},
			{(int)ScratchBlockType.StartCountdown, 13},
			{(int)ScratchBlockType.VectorValue, 14},
		};
		/// <summary> BlockData Logic </summary>
		public static IEngineBlockBaseData CreateBlockData(this ScratchBlockType type)
		{
			switch (type)
			{
				case ScratchBlockType.ApplyForce: return new BlockLogic_ApplyForce();
				case ScratchBlockType.CompareValues: return new BlockLogic_CompareValues();
				case ScratchBlockType.DestroyObject: return new BlockLogic_DestroyObject();
				case ScratchBlockType.EntityValue: return new BlockLogic_EntityValue();
				case ScratchBlockType.GetCharacterSpeed: return new BlockLogic_GetCharacterSpeed();
				case ScratchBlockType.GetVectorMagnitude: return new BlockLogic_GetVectorMagnitude();
				case ScratchBlockType.IfElse: return new BlockLogic_IfElse();
				case ScratchBlockType.IntegerValue: return new BlockLogic_IntegerValue();
				case ScratchBlockType.OnCollisionEnter: return new BlockLogic_OnCollisionEnter();
				case ScratchBlockType.OnCollisionExit: return new BlockLogic_OnCollisionExit();
				case ScratchBlockType.OnCollisionStay: return new BlockLogic_OnCollisionStay();
				case ScratchBlockType.OnObjectCreated: return new BlockLogic_OnObjectCreated();
				case ScratchBlockType.RepeatAction: return new BlockLogic_RepeatAction();
				case ScratchBlockType.StartCountdown: return new BlockLogic_StartCountdown();
				case ScratchBlockType.VectorValue: return new BlockLogic_VectorValue();
			}
			 return null;
		}
	}
	public partial class BlockLogic_ApplyForce  : IEngineBlockSimpleBase
	{
		public ScratchClassName ClassName => ScratchClassName.Simple;
		public ScratchBlockType Type => ScratchBlockType.ApplyForce;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_CompareValues  : IEngineBlockOperationBase
	{
		public ScratchClassName ClassName => ScratchClassName.Operation;
		public ScratchBlockType Type => ScratchBlockType.CompareValues;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_Variable1Guid = -1;
		public Int32 Variable1Guid
		{
			get => m_Variable1Guid;
			set
			{
			SetVariable1Guid(ref value);
			m_Variable1Guid = value;
			}
		}
		partial void SetVariable1Guid(ref Int32 newData);
		private Int32 m_Variable2Guid = -1;
		public Int32 Variable2Guid
		{
			get => m_Variable2Guid;
			set
			{
			SetVariable2Guid(ref value);
			m_Variable2Guid = value;
			}
		}
		partial void SetVariable2Guid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_DestroyObject  : IEngineBlockSimpleBase
	{
		public ScratchClassName ClassName => ScratchClassName.Simple;
		public ScratchBlockType Type => ScratchBlockType.DestroyObject;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_EntityValue  : IEngineBlockOperationBase
	{
		public ScratchClassName ClassName => ScratchClassName.Operation;
		public ScratchBlockType Type => ScratchBlockType.EntityValue;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_Variable1Guid = -1;
		public Int32 Variable1Guid
		{
			get => m_Variable1Guid;
			set
			{
			SetVariable1Guid(ref value);
			m_Variable1Guid = value;
			}
		}
		partial void SetVariable1Guid(ref Int32 newData);
		private Int32 m_Variable2Guid = -1;
		public Int32 Variable2Guid
		{
			get => m_Variable2Guid;
			set
			{
			SetVariable2Guid(ref value);
			m_Variable2Guid = value;
			}
		}
		partial void SetVariable2Guid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_GetCharacterSpeed  : IEngineBlockOperationBase
	{
		public ScratchClassName ClassName => ScratchClassName.Operation;
		public ScratchBlockType Type => ScratchBlockType.GetCharacterSpeed;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_Variable1Guid = -1;
		public Int32 Variable1Guid
		{
			get => m_Variable1Guid;
			set
			{
			SetVariable1Guid(ref value);
			m_Variable1Guid = value;
			}
		}
		partial void SetVariable1Guid(ref Int32 newData);
		private Int32 m_Variable2Guid = -1;
		public Int32 Variable2Guid
		{
			get => m_Variable2Guid;
			set
			{
			SetVariable2Guid(ref value);
			m_Variable2Guid = value;
			}
		}
		partial void SetVariable2Guid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_GetVectorMagnitude  : IEngineBlockOperationBase
	{
		public ScratchClassName ClassName => ScratchClassName.Operation;
		public ScratchBlockType Type => ScratchBlockType.GetVectorMagnitude;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_Variable1Guid = -1;
		public Int32 Variable1Guid
		{
			get => m_Variable1Guid;
			set
			{
			SetVariable1Guid(ref value);
			m_Variable1Guid = value;
			}
		}
		partial void SetVariable1Guid(ref Int32 newData);
		private Int32 m_Variable2Guid = -1;
		public Int32 Variable2Guid
		{
			get => m_Variable2Guid;
			set
			{
			SetVariable2Guid(ref value);
			m_Variable2Guid = value;
			}
		}
		partial void SetVariable2Guid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_IfElse  : IEngineBlockConditionBase
	{
		public ScratchClassName ClassName => ScratchClassName.Condition;
		public ScratchBlockType Type => ScratchBlockType.IfElse;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_TrueBlockGuid = -1;
		public Int32 TrueBlockGuid
		{
			get => m_TrueBlockGuid;
			set
			{
			SetTrueBlockGuid(ref value);
			m_TrueBlockGuid = value;
			}
		}
		partial void SetTrueBlockGuid(ref Int32 newData);
		private Int32 m_FalseBlockGuid = -1;
		public Int32 FalseBlockGuid
		{
			get => m_FalseBlockGuid;
			set
			{
			SetFalseBlockGuid(ref value);
			m_FalseBlockGuid = value;
			}
		}
		partial void SetFalseBlockGuid(ref Int32 newData);
		private Int32 m_OperationGuid = -1;
		public Int32 OperationGuid
		{
			get => m_OperationGuid;
			set
			{
			SetOperationGuid(ref value);
			m_OperationGuid = value;
			}
		}
		partial void SetOperationGuid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_IntegerValue  : IEngineBlockOperationBase
	{
		public ScratchClassName ClassName => ScratchClassName.Operation;
		public ScratchBlockType Type => ScratchBlockType.IntegerValue;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_Variable1Guid = -1;
		public Int32 Variable1Guid
		{
			get => m_Variable1Guid;
			set
			{
			SetVariable1Guid(ref value);
			m_Variable1Guid = value;
			}
		}
		partial void SetVariable1Guid(ref Int32 newData);
		private Int32 m_Variable2Guid = -1;
		public Int32 Variable2Guid
		{
			get => m_Variable2Guid;
			set
			{
			SetVariable2Guid(ref value);
			m_Variable2Guid = value;
			}
		}
		partial void SetVariable2Guid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_OnCollisionEnter  : IEngineBlockTriggerBase
	{
		public ScratchClassName ClassName => ScratchClassName.Trigger;
		public ScratchBlockType Type => ScratchBlockType.OnCollisionEnter;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		private int m_ReturnVarGuid_0 = -1;
		/// <summary> EntityRef_0 </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0;
			set
			{
			SetReturnVarGuid_0(ref value);
			m_ReturnVarGuid_0 = value;
			}
		}
		/// <summary> EntityRef_0 </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private int m_ReturnVarGuid_1 = -1;
		/// <summary> EntityRef_1 </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1;
			set
			{
			SetReturnVarGuid_1(ref value);
			m_ReturnVarGuid_1 = value;
			}
		}
		/// <summary> EntityRef_1 </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		public int GetReturnValuesLength()=> 2;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_OnCollisionExit  : IEngineBlockTriggerBase
	{
		public ScratchClassName ClassName => ScratchClassName.Trigger;
		public ScratchBlockType Type => ScratchBlockType.OnCollisionExit;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		private int m_ReturnVarGuid_0 = -1;
		/// <summary> EntityRef_0 </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0;
			set
			{
			SetReturnVarGuid_0(ref value);
			m_ReturnVarGuid_0 = value;
			}
		}
		/// <summary> EntityRef_0 </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private int m_ReturnVarGuid_1 = -1;
		/// <summary> EntityRef_1 </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1;
			set
			{
			SetReturnVarGuid_1(ref value);
			m_ReturnVarGuid_1 = value;
			}
		}
		/// <summary> EntityRef_1 </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		public int GetReturnValuesLength()=> 2;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_OnCollisionStay  : IEngineBlockTriggerBase
	{
		public ScratchClassName ClassName => ScratchClassName.Trigger;
		public ScratchBlockType Type => ScratchBlockType.OnCollisionStay;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		private int m_ReturnVarGuid_0 = -1;
		/// <summary> EntityRef_0 </summary>
		public int ReturnVarGuid_0
		{
			get => m_ReturnVarGuid_0;
			set
			{
			SetReturnVarGuid_0(ref value);
			m_ReturnVarGuid_0 = value;
			}
		}
		/// <summary> EntityRef_0 </summary>
		partial void SetReturnVarGuid_0(ref int newData);
		private int m_ReturnVarGuid_1 = -1;
		/// <summary> EntityRef_1 </summary>
		public int ReturnVarGuid_1
		{
			get => m_ReturnVarGuid_1;
			set
			{
			SetReturnVarGuid_1(ref value);
			m_ReturnVarGuid_1 = value;
			}
		}
		/// <summary> EntityRef_1 </summary>
		partial void SetReturnVarGuid_1(ref int newData);
		public int GetReturnValuesLength()=> 2;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
				case 0:
					ReturnVarGuid_0 = value;
					break;
				case 1:
					ReturnVarGuid_1 = value;
					break;
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
				case 0:
					return ReturnVarGuid_0;
				case 1:
					return ReturnVarGuid_1;
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[2];
			values[0] = ReturnVarGuid_0;
			values[1] = ReturnVarGuid_1;
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_OnObjectCreated  : IEngineBlockTriggerBase
	{
		public ScratchClassName ClassName => ScratchClassName.Trigger;
		public ScratchBlockType Type => ScratchBlockType.OnObjectCreated;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_RepeatAction  : IEngineBlockLoopBase
	{
		public ScratchClassName ClassName => ScratchClassName.Loop;
		public ScratchBlockType Type => ScratchBlockType.RepeatAction;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_ChildRootGuid = -1;
		public Int32 ChildRootGuid
		{
			get => m_ChildRootGuid;
			set
			{
			SetChildRootGuid(ref value);
			m_ChildRootGuid = value;
			}
		}
		partial void SetChildRootGuid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_StartCountdown  : IEngineBlockLoopBase
	{
		public ScratchClassName ClassName => ScratchClassName.Loop;
		public ScratchBlockType Type => ScratchBlockType.StartCountdown;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_ChildRootGuid = -1;
		public Int32 ChildRootGuid
		{
			get => m_ChildRootGuid;
			set
			{
			SetChildRootGuid(ref value);
			m_ChildRootGuid = value;
			}
		}
		partial void SetChildRootGuid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
	public partial class BlockLogic_VectorValue  : IEngineBlockOperationBase
	{
		public ScratchClassName ClassName => ScratchClassName.Operation;
		public ScratchBlockType Type => ScratchBlockType.VectorValue;
		private BVector3 m_CanvasPos = BVector3.zero;
		public BVector3 CanvasPos
		{
			get => m_CanvasPos;
			set
			{
			SetCanvasPos(ref value);
			m_CanvasPos = value;
			}
		}
		partial void SetCanvasPos(ref BVector3 newData);
		private int m_NextBlockGuid = -1;
		public int NextBlockGuid
		{
			get => m_NextBlockGuid;
			set
			{
			SetNextBlockGuid(ref value);
			m_NextBlockGuid = value;
			}
		}
		partial void SetNextBlockGuid(ref int newData);
		private IEngineBlockBaseData m_NextBlock;
		public IEngineBlockBaseData NextBlock
		{
			get => m_NextBlock;
			set
			{
			SetNextBlock(ref value);
			m_NextBlock = value;
			}
		}
		partial void SetNextBlock(ref IEngineBlockBaseData newData);
		private int m_Guid = -1;
		public int Guid
		{
			get => m_Guid;
			set
			{
			SetGuid(ref value);
			m_Guid = value;
			}
		}
		partial void SetGuid(ref int newData);
		private Int32 m_Variable1Guid = -1;
		public Int32 Variable1Guid
		{
			get => m_Variable1Guid;
			set
			{
			SetVariable1Guid(ref value);
			m_Variable1Guid = value;
			}
		}
		partial void SetVariable1Guid(ref Int32 newData);
		private Int32 m_Variable2Guid = -1;
		public Int32 Variable2Guid
		{
			get => m_Variable2Guid;
			set
			{
			SetVariable2Guid(ref value);
			m_Variable2Guid = value;
			}
		}
		partial void SetVariable2Guid(ref Int32 newData);
		#region IBlockVarGuid
		public void SetInputValues(int index, string value)
		{
			switch(index)
			{
			}
		}
		public string GetInputValue(int index)
		{
			switch(index)
			{
			}
			return string.Empty;
		}
		public string[] GetInputValues()
		{
			string[] values = new string[0];
			return values;
		}
		public int GetVarGuidsLength()=> 0;
		public void SetVarsGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetVarGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetVarGuids()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
		#region IBlockReturnVarGuid
		public int GetReturnValuesLength()=> 0;
		public void SetReturnValueGuid(int index, int value)
		{
			switch(index)
			{
			}
		}
		public int GetReturnValueGuid(int index)
		{
			switch(index)
			{
			}
			return -1;
		}
		public int[] GetReturnValues()
		{
			int[] values = new int[0];
			return values;
		}
		#endregion
	}
}
